package examples;

import ergoline::_;
import ck;
import or;

@main class orcheck {
    @entry def self(args: array<string>) {
        val n = ck::numPes() * 4;

        val cs = new communicator@array1d(n, n);
        cs.sample();

        ck::exitAfterQuiescence();
    }
}

class communicator {
    val n: int;

    @entry def self(=n: int) {}

    @entry def print_value(x: int): unit {
        val ours = self[@]index();
        val theirs = (ours - 1 + n) % n;
        val y = ours + theirs;

        if (x == y) {
            println(`${self[@]index()}> received value: ${x}`);
        } else {
            abort(`${self[@]index()}> received value ${x}, expected ${y}!`);
        }
    }

    @local @entry def gen_value(): int {
        return self[@]index();
    }

    @local @entry def add_values(x: int, y: int): int {
        return x + y;
    }

    @charisma @entry def sample() {
        val values = or::placeholder<int, 1>(n);
        val sums = or::placeholder<int, 1>(n);

        for (i <- or::ispace(self@)) {
            val value = self@[i].gen_value();
            values[(i + 1) % n] = value;
            sums[i] = self@[i].add_values(value, values[i]);
            self@[i].print_value(sums[i]);
        }

        // self[@]contribute(exit);
    }
}
