package examples;

import ergoline::_;
import ck;

class pong with message<string> {
    def pong() { }
    override def value(): string {
        return "pong on " + ck::myPe().toString();
    }
}

class ping with message<string> {
    def ping() { }
    override def value(): string {
        return "ping on " + ck::myPe().toString();
    }
}

class pingpong {
    val selfProxy: pingpong[@]group;
    val mainProxy: main@;
    val pongCount: int = 0;

    @entry def pingpong(=selfProxy: pingpong[@]group, =mainProxy: main@) {
        // broadcast a ping to all members of the group
        self@receive(self[@]index(), new ping());
    }

    private def notePong() {
        pongCount += 1;
    }

    @entry def sendPong(to: int) {
        val peer = self@[to];
        peer.receive(self[@]index(), new pong());
    }

    @entry def receive(from: int, msg: message<string>) {
        match (msg) {
            case _: ping => sendPong(from);
            case _: pong => notePong();
        }

        println(msg.value());

        if (pongCount >= ck::numPes()) {
            mainProxy.finished();
        }
    }
}

@main class main {
    val count: int = 0;

    @entry def main(selfProxy: main@, args: array<string>) {
        new pingpong@group(self@);
    }

    @entry def finished() {
        count += 1;

        if (count >= ck::numPes()) {
            exit();
        }
    }
}

trait message<T> {
    def value(): T;
}
