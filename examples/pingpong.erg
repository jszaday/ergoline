package examples;

import ergoline::_;
import ck;

trait message<T> {
    def value(): T;
}

class pong with message<string> {
    override def value(): string {
        return "pong";
    }
}

class ping with message<string> {
    override def value(): string {
        return "ping";
    }
}

class pingpong {
    val mainProxy: main@;

    @entry def self(=mainProxy: main@) {
        // broadcast a ping to all members of the group
        self@receive(self[@]index(), new ping());
        // then start the exchange loop
        self[@]exchange();
    }

    @entry def sendPong(to: int) {
        val peer = self@[to];
        peer.receive(self[@]index(), new pong());
    }

    @entry def acknowledge(src: int, msg: message<string>) {
        println(`pe${self[@]index()}> received a ${msg.value()} from pe${src}.`);
    }

    @mailbox def receive(src: int, msg: message<string>);

    @threaded @entry def exchange() {
        @overlap for (var it = 0; it < ck::numPes(); it += 1) {
            await all {
                when receive(src, msg: ping) if src == it => {
                    acknowledge(src, msg);
                    sendPong(src);
                }

                when receive(src, msg: pong) if src == it =>
                    self.acknowledge(src, msg);
            }
        }

        self[@]contribute(mainProxy.finished);
    }
}

@main class main {
    @entry def main(args: array<string>) {
        new pingpong@group(self@);
    }

    @entry def finished() {
        println("main> done~!");
        exit();
    }
}
