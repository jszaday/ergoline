package examples;

import ergoline::_;
import ck;

@main class main {
    @entry def main() {
        self@test(100);
    }

    @threaded @entry def test(n: int) {
        val sz = n * 1000;
        val nReps = n / 10 + 1;
        val arr = array<double, 1>::fill(sz, 2.0);

        val tst = new tester@();

        var avgMlbx = 0.0;
        var avgInpt = 0.0;

        for (var it = 0; it < nReps; it += 1) {
            tst.run(n);

            val start = ck::wallTime();
            for (var i = 0; i < n; i += 1) {
                tst.mailbox1(i, arr);
                tst.mailbox2(i, arr);
            }
            ck::awaitQuiescence();
            
            val mid = ck::wallTime();
            for (var i = 0; i < n; i += 1) {
                tst.input(i, arr);
            }
            ck::awaitQuiescence();
            
            val end = ck::wallTime();
            avgMlbx += mid - start;
            avgInpt += end - mid;

            println(`done with iteration ${it + 1} out of ${nReps}`);
        }

        println(`time for mailboxes ${avgMlbx / n}`);
        println(`time for plain ol' inputs ${avgInpt / n}`);

        exit();
    }
}

class tester {
    @entry def tester() {}

    @threaded @entry def run(n: int) {
        @overlap for (var i = 0; i < n; i += 1) {
            when mailbox1(_ == i, _),
                 mailbox2(_ == i, _) => {
                // does nothing
            }
        }
    }

    @mailbox def mailbox1(it: int, arr: array<double, 1>);
    @mailbox def mailbox2(it: int, arr: array<double, 1>);

    @entry def input(it: int, arr: array<double, 1>) {
        // also does nothing
    }
}
