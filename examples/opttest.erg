package examples;

import ergoline::_;

class foo {
    def toString(): string {
        return "foo";
    }
}

@main class opttest {
    @entry def self() {
        val o1 = option(new foo());
        val o2 = option<foo>();
        val o3 = o1.map((_: foo) => 42);
        val o4 = option<int>();
        val o5 = o1.flatMap((_: foo) => o4);

        val chk = checkMatch(o1) && !checkMatch(o2);
        assert(chk);

        assert(o3.getOrElse(36) == 42);
        assert(o4.getOrElse(36) == 36);

        check(o3);
        check(o4);
        check(o5);

        checkEither();
    }

    def check<A>(o: option<A>) {
        if (o.nonEmpty()) {
            println(`optional has value ${o.get()}`);
        } else {
            assert(o.isEmpty());

            println("optional does not have a value");
        }
    }

    def check<L, R>(x: either<L, R>) {
        match (x) {
            case left(l) => println(`got a left value of ${l}!`);
            case right(r) => println(`got a right value of ${r}!`);
        }
    }

    def checkEither() {
        val l = new either<int, double>(42);
        val r = new either<int, double>(42.0);

        check(l);
        check(r);

        exit();
    }
}

def checkMatch<A>(o: option<A>): bool {
    return match (o) {
        case some(a) => {
            println(`got sum ${a}!`);
            true;
        }
        case none() => {
            println("got nuthin'!");
            false;
        }
    };
}
