package examples;

import ergoline::_;
import ck;

@main class puptest {
    @entry def self() {
        val n = ck::numPes() * 4;
        val a = new array<int>(n);

        for (var i = 0; i < n; i += 1) {
            a[i] = 2 * i + 1;
        }

        self@receive((a, new test(42)));
    }

    @entry def receive(at: (array<int>, test)) {
        val (a, t) = at;

        for (var i = 0; i < a.size(); i += 1) {
            println(`a[${i}] = ${a[i]}`);
        }

        println(`t.i = ${t.i}`);

        self@receive(new tupleHolder((t, new testHolder(t))));
    }

    @entry def receive(hs: ((has<int>, has<int>), has<has<int>>, int)) {
        val gs = hs[0];
        var i = 16384;

        // "===" is the identity comparator, which checks
        // whether two variables "point" to the same object
        assert(gs[0] === gs[1]);
        assert(gs[0] === hs[1].get());

        assert(gs[0].get() == hs[2]);

        val f = (j: int) => {
            println("lambda function called!");
            return i + j;
        };

        i = 0;

        self@receive(f);
    }

    @entry def receive(f: int => int) {
        val i = f(1);

        if (i == 1) { exit(); }
        else        { abort(`expected 1, got ${i} instead?`); }
    }

    @entry def receive(h: tupleHolder) {
        val (t, th) = h.get();
        self@receive(((t, t), th, t.get()));
    }
}

class test with has<int> {
    val i: int;
    def self(=i: int) {}
    override def get(): int {
        return i;
    }
}

class testHolder with has<has<int>> {
    val t: test;
    def self(=t: test) {}
    override def get(): has<int> {
        return t;
    }
}

class tupleHolder with has<(has<int>, has<has<int>>)> {
    val t: (has<int>, has<has<int>>);
    def self(=t: (test, testHolder)) {}
    override def get(): (has<int>, has<has<int>>) {
        return t;
    }
}

trait has<T> {
    def get(): T;
}
