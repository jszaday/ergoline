package examples;

import ergoline::_;
import ck;

@main class puptest {
    val selfProxy: puptest@;
    
    @entry def puptest(=selfProxy: puptest@) {
        val n = ck::numPes() * 4;
        val a = new array<int>(n);
        for (var i = 0; i < n; i += 1) {
            a[i] = 2 * i + 1;
        }
        receive((a, new test(42)));
    }

    @entry def receive(at: (array<int>, test)) {
        val a = at[0];
        val t = at[1];
        for (var i = 0; i < a.size(); i += 1) {
            println("a[" + i.toString() + "] = " + a[i].toString());
        }
        println("t.i = " + t.i.toString());
        receive(new tupleHolder((t, new testHolder(t))));
    }

    @entry def receive(hs: ((has<int>, has<int>), has<has<int>>, int)) {
        val gs = hs[0];
        assert(gs[0].get() == hs[2]);
        assert(gs[0].get() == gs[1].get());
        assert(gs[0].get() == hs[1].get().get());
        exit();
    }

    @entry def receive(h: tupleHolder) {
        val t = h.get()[0];
        val th = h.get()[1];
        selfProxy.receive(((t, t), th, t.get()));
    }
}

class test with has<int> {
    val i: int;
    def test(=i: int) { }
    def get(): int {
        return i;
    }
}

class testHolder with has<has<int>> {
    val t: test;
    def testHolder(=t: test) { }
    def get(): has<int> {
        return t;
    }
}

class tupleHolder with has<(has<int>, has<has<int>>)> {
    val t: (has<int>, has<has<int>>);
    def tupleHolder(=t: (test, testHolder)) { }
    def get(): (has<int>, has<has<int>>) {
        return t;
    }
}

trait has<T> {
    def get(): T;
}
