package examples;

import ergoline::_;
import ck;

@main class opcheck {
    def countOnes(x: int): int {
        var i = x;
        var n = 0;

        while (i != 0) {
            i = i & (i - 1);
            n += 1;
        }

        return n;
    }

    @entry def self(args: array<string>) {
        val a = 2;
        val b = 3;
        val c = 4;
        val d = 5;
        assert(c > b && b < c);

        val e = (a + (b * c)) + d;
        val f = a + b * c + d;
        assert((e == f) == true);

        val g = a + ((b * c) * d);
        val h = a + b * c * d;
        assert((g == h) != false);

        val i = -5;
        val j = !(i < 0);
        assert(!j);

        val k = 32 + 3 == 35;
        assert(k);

        val l = ((a + b) - c) + d;
        val m = a + b - c + d;
        assert(l == m);

        val numOnes = countOnes(d);
        println(`main> there are ${numOnes} ones in ${d}.`);
        assert(numOnes == 2);

        val s = "a" + "b";
        assert(s == "ab");

        println("main> operators seem operational~!");

        exit();
    }
}
