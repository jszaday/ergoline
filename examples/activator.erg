package examples;

import ergoline::_;

@main class activator {
    var count: int = 0;

    @entry def self() {
        self@activate(new duck());
        self@activate(new lion());
    }

    def isBird(a: animal): bool {
        return match (a) {
            case _: bird => true;
            case _       => false;
        };
    }

    @entry def activate(a: animal): unit {
        if (isBird(a)) println("hey> it's a bird!");

        match (a) {
            case animal(kind, legs) => {
                println(`hey> a(n) ${kind} has ${legs} legs!`);
            }
        }

        match (a) {
            case d: duck => {
                identify(d);
                makeSound(d);
            }
            case l: lion => {
                identify(l);
                makeSound(l);
            }
        }

        count += 1;
        if (count >= 2) {
            exit();
        }
    }
}

def makeSound<A>(a: A) where A == lion {
    println("hey> a lion roars!");
}

def makeSound<A>(a: A) where A == duck {
    println("hey> a duck quacks!");
}

def identify<A <: animal>(a: A) where (bird >: A) {
    val tid = typeid(a);
    println(`hey> a(n) ${tid.name()} has a ${a.beak()}!`);
}

def identify<A <: animal>(a: A) where !(A <: bird) {
    val tid = typeid(a);
    println(`hey> a(n) ${tid.name()} does not have a beak!`);
}

class lion with animal {
    override def numLegs(): int {
        return 4;
    }
}

class duck with bird {
    override def beak(): string {
        return "bill";
    }

    override def numLegs(): int {
        return 2;
    }
}

trait bird extends animal {
    def beak(): string;
}

trait animal {
    def numLegs(): int;

    static def unapply(a: animal): option<(string, int)> {
        val tid = typeid(a);
        return option<(string, int)>((tid.name(), a.numLegs()));
    }
}
