package examples;

import ergoline::_;

@main class activator {
    val selfProxy: activator@;
    var count: int;

    @entry def activator (=selfProxy: activator@): unit {
        val mm: megaman = new megaman();
        selfProxy.activate(mm);
    }

    @entry def activate(nn: netNavi): unit {
        nn.jackIn();

        val ability: string = match(nn) {
            case x: metalman => x.metalGear();
            case x: megaman => x.blaster();
        };

        println(ability);

        if (count == 0) {
            count += 1;
            selfProxy.activate(new metalman());
        } else {
            exit();
        }
    }
}

class metalman with netNavi {
    def metalman(): unit { }

    def metalGear(): string {
        return name() + " launches a gear at you!";
    }

    override def name(): string {
        return "Metalman";
    }
}

class megaman with netNavi {
    def megaman(): unit { }

    def blaster(): string {
        return name() + " goes pew pew";
    }

    override def name(): string {
        return "Megaman";
    }
}

trait netNavi {
    def name(): string;

    def jackIn(): unit {
        println("jack in, " + name() + ", execute!");
    }
}
