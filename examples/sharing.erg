package examples;

import ergoline::_;
import ck;

@main class main {
    val k: int = 4;

    @entry def self(args: array<string>) {
        if (args.size() >= 2) {
            k = args[1].toInt();
        }

        val p = ck::numPes();
        val n = k * p;

        val table = new ck::dht<int, int>(p);
        new sharing@array1d(n, n, k, self@, table);
    }

    @entry def done() {
        println("main> all done!");
        exit();
    }
}

class sharing {
    val mainProxy: main@;
    val table: ck::dht<int, int>;
    val n: int;
    val k: int;

    @entry def self(=n: int, =k: int, =mainProxy: main@, =table: ck::dht<int, int>) {
        self[@]share();
    }

    @threaded @entry def share() {
        val ours = self[@]index();
        val theirs = (ours + 1) % n;

        for (var i = (ours * k); i < ((ours * k) + k); i += 1) {
            table[i] = 2 * i + 1;
        }

        for (var i = (theirs * k); i < ((theirs * k) + k); i += 1) {
            val value = await table[i];
            println(`${ours}> received table[${i}]=${value}`);
        }

        self[@]contribute(mainProxy.done);
    }
}
