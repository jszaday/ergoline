package examples;

import ergoline::_;

@main class main with acceptor {
    val n: int;

    @entry def self(args: array<string>) {
        n = (args.size() > 1) ? args[1].toInt() : 0;
        n = math::max(2 * configuration.threshold, n);
        new fib@(self@, n);
    }

    @entry override def accept(x: int): unit {
        println(`fib(${n}) = ${x}`);
        exit();
    }
}

class fib with acceptor {
    var count: int = 0;
    var value: int = 0;
    val parent: acceptor@;

    @entry def self(=parent: acceptor@, n: int) {
        if (n <= configuration.threshold) {
            parent.accept(seq_fib(n));
        } else {
            new fib@(self@, n - 1);
            new fib@(self@, n - 2);
        }
    }

    @entry override def accept(x: int): unit {
        count += 1;
        value += x;

        if (count >= 2) {
            parent.accept(value);
        }
    }

    private def seq_fib(n: int): int {
        return (n > 1) ? (seq_fib(n - 1) + seq_fib(n - 2)) : n;
    }
}

object configuration {
    val threshold: int = 16;
}

trait acceptor {
    @entry def accept(x: int): unit;
}
