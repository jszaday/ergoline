package examples;

import ergoline::_;

@main class main with acceptor {
    @entry def main(args: array<string>) {
        val n: int = (args.size() > 1) ? args[1].toInt() : 0;
        new fib@(self@, (n > 16) ? n : 16);
    }

    @entry override def accept(x: int) {
        println("result = " + x.toString());
        exit();
    }
}

class fib with acceptor {
    var count: int = 0;
    var value: int = 0;
    val parent: acceptor@;

    @entry def fib(=parent: acceptor@, n: int) {
        if (n > 1) { new fib@(self@, n - 1);
                     new fib@(self@, n - 2); }
        else       { parent.accept(n); }
    }

    @entry override def accept(x: int) {
        count += 1;
        value += x;

        if (count >= 2) { parent.accept(value); }
    }
}

trait acceptor {
    @entry def accept(x: int): unit;
}
