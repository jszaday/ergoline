package examples;

import ergoline::_;
import ck;

@main class matmul {
    def dgemm(a: array<double, 2>, b: array<double, 2>): array<double, 2> {
        val m = a.shape[0];
        assert(a.shape[1] == b.shape[0]);
        val n = b.shape[1];
        val c = array<double, 2>::fill((m, n), 0.0);
        for (var i = 0; i < m; i += 1) {
            for (var j = 0; j < n; j += 1) {
                for (var k = 0; k < m; k += 1) {
                    c[i, k] += a[i, j] * b[j, k];
                }
            }
        }
        return c;
    }

    def linspace(m: int, n: int): array<double, 2> {
        val a = new array<double, 2>(m, n);
        for (var i = 0; i < m; i += 1) {
            for (var j = 0; j < n; j += 1) {
                a[i, j] = ((i * n) + j).toDouble();
            }
        }
        return a;
    }

    @entry def self() {
        val m = 4;
        val n = 2;
        val a = linspace(m, n);
        println(`a = ${a}`);
        val b = linspace(n, m);
        println(`b = ${b}`);
        val c = dgemm(a, b);
        println(`c = ${c}`);
        exit();
    }
}
