package examples;

import ergoline::_;

abstract class peelable {
    var peeled: bool = false;

    def peelable() {}

    def peel() { peeled = true; }
}

trait colorful {
    def color(): string;
}

struct banana extends peelable with colorful {
    def banana() {}

    override def color(): string {
        return "yellow";
    }
}

class cherry with colorful {
    def cherry() {}

    override def color(): string {
        return "red";
    }
}

@main class traitcheck {
    @entry def traitcheck(args: array<string>) {
        val b = new banana();
        val c = new cherry();
        val d: colorful = b;

        check(b);
        check(c);
        check(d);

        peelByValue(b);         // `b` gets passed by-value 
        assertNot(b.peeled);    /* so its peeling will not be
                                 * reflected here
                                 */

        peelByReference(b);     // then, `b` gets passed-by-reference
        assert(b.peeled);       // so it is actually peeled

        peelIt(b);

        exit();
    }

    def peelIt(p: peelable) {
        p.peel();
    }

    def peelByReference(&b: banana) {
        b.peel();
    }

    def peelByValue(b: banana) {
        b.peel();

        assert(b.peeled);
    }

    def check(c: colorful) {
        println(`note> check was passed a ${c.color()}-colored object!`);
    }
}
