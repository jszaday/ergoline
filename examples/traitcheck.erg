package examples;

import ergoline::_;

abstract class peelable {
    var peeled: bool = false;

    def peelable() {}

    def peel() { peeled = true; }
}

trait colorful {
    def color(): string;
}

struct banana extends peelable with colorful {
    def banana() {}

    override def color(): string {
        return "yellow";
    }
}

class cherry with colorful {
    def cherry() {}

    override def color(): string {
        return "red";
    }
}

@main class traitcheck {
    @entry def traitcheck(args: array<string>) {
        val b = new banana();   // stack-alloc'd despite `new`
        val c = new cherry();
        val d: colorful = b;    // a copy is made at this point

        check(b);
        check(c);
        check(d);

        peelIt(b);              // first, `b` is passed by-value
        assertNot(b.peeled);    // so its peeling is not seen here

        peelIt(&b);             // then, it's passed-by-reference
        assert(b.peeled);       // so its peeling can be seen here

        exit();
    }

    def peelIt(p: peelable) {
        assertNot(p.peeled);

        p.peel();
    }

    def check(c: colorful) {
        println(`note> check was passed a ${c.color()}-colored object!`);
    }
}
