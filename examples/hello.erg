package examples;

import ergoline::_;

@main class hello with acceptor {
    val selfProxy: hello@;

    @entry def hello(var self: hello, =selfProxy: hello@): unit {
        val n: int = 16;
        new fib@(selfProxy, n);
    }

    @entry override def accept(var self: hello, x: int): unit {
        println("result = " + x.toString());
        exit();
    }
}

class fib with acceptor {
    var count: int = 0;
    var value: int = 0;
    val selfProxy: fib@;
    val parent: acceptor@;

    @entry def fib(var self: fib, =selfProxy: fib@, =parent: acceptor@, n: int): unit {
        if (n > 1) {
            new fib@(selfProxy, n - 1);
            new fib@(selfProxy, n - 2);
        } else {
            parent.accept(n);
        }
    }

    @entry override def accept(var self: fib, x: int): unit {
        count += 1;
        value += x;
        if (count >= 2) {
            parent.accept(value);
        }
    }
}

trait acceptor {
    @entry def accept(var self: acceptor, x: int): unit;
}
