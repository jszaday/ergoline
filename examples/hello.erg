package examples;

import ergoline::_;
import ck;

class hello {
    val selfProxy: hello@;
    val previous: ck::future<int>;
    val next: ck::future<int>;

    @entry def hello(=selfProxy: hello@, =previous: ck::future<int>, =next: ck::future<int>) {
        selfProxy.wait();
    }

    @threaded @entry def wait() {
        val i = previous.get();
        println("hello #" + i.toString());
        next.set(i + 1);
    }
}

@main class main {
    val n: int;

    @entry def main(selfProxy: main@, args: array<string>): unit {
       n = (args.size() > 1) ? args[1].toInt() : 16;
       val first = ck::future<int>();
       var curr = first;
       // chain n futures with first at the head
       for (i <- (new range<int>(0, 1, n))) {
           val next = ck::future<int>();
           // create a hello chare for each
           new hello@(curr, next);
           curr = next;
       }
       // set the first future
       first.set(0);
       // then we wait on the last
       selfProxy.wait(curr);
    }

    @threaded @entry def wait(f: ck::future<int>) {
        val i = f.get();
        assert(i == n);
        println("hello #" + i.toString());
        exit();
    }
}
