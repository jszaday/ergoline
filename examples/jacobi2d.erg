package examples;

import ergoline::_;
import ck;

// singleton object with the run's global parameters
object globals {
    val north: int = 1;
    val east: int = 2;
    val south: int = 3;
    val west: int = 4;

    var maxIters: int = 250;
    var threshold: double = 0.004;
    var mainProxy: main@;

    var arrDimX: int = 128;
    var arrDimY: int = 128;

    var blockDimX: int = 64;
    var blockDimY: int = 64;

    var numChareX: int;
    var numChareY: int;
}

@main class main {
    var startTime: double;

    @entry def self(args: array<string>) {
        globals.mainProxy = self@;

        if (args.size() >= 3) {
            globals.arrDimX = args[1].toInt();
            globals.arrDimY = globals.arrDimX;

            globals.blockDimX = args[2].toInt();
            globals.blockDimY = globals.blockDimX;

            if (args.size() >= 4) {
                globals.maxIters = args[3].toInt();
            }
        }

        globals.numChareX = globals.arrDimX / globals.blockDimX;
        globals.numChareY = globals.arrDimY / globals.blockDimY;

        println("\nSTENCIL COMPUTATION WITH NO BARRIERS");
        println(`Running Jacobi on ${ck::numPes()} processors with (${globals.numChareX}, ${globals.numChareY}) chares`);
        println(`Array Dimensions: [${globals.arrDimX}, ${globals.arrDimY}]`);
        println(`Block Dimensions: [${globals.blockDimX}, ${globals.blockDimX}]`);
        println(`Max Iterations: ${globals.maxIters}`);
        println(`Threshold: ${globals.threshold}`);

        // update globals then call back to self@initialize when done
        // (the constructor of jacobi2d uses their values.)
        ck::updateGlobal<globals>(self@initialize);
    }

    @entry def initialize() {
        startTime = ck::wallTime();

        val workers =
            new jacobi2d@array2d(globals.numChareX, globals.numChareY);
        
        workers.run();
    }

    @entry def done(numIters: int) {
        var time = ck::wallTime() - startTime;

        if (numIters >= globals.maxIters) {
            println(`main> did not converge, finished ${numIters} iterations in ${time} s.`);
        } else {
            println(`main> converged in ${numIters} iterations in ${time} s.`);
        }

        exit();
    }
}

class jacobi2d {
    val numNeighbors: int = 0;

    val hasEast: bool;
    val hasWest: bool;
    val hasNorth: bool;
    val hasSouth: bool;

    val iStart: int = 1;
    val jStart: int = 1;
    val iFinish: int;
    val jFinish: int;

    var grid: array<double, 2>;
    var nextGrid: array<double, 2>;

    @entry def self() {
        val shape = (globals.blockDimX + 2, globals.blockDimY + 2);
        nextGrid = new array<double, 2>(shape[0], shape[1]);
        grid = array<double, 2>::fill(shape, 0.0);

        val (x, y) = self[@]index();
        def inBounds(num: int, max: int): (bool, bool) {
            return (num != 0, num != (max - 1));
        }

        // decide which neighbors we have based on our
        // position in the grid (of chares)
        (hasEast, hasWest) = inBounds(x, globals.numChareX);
        (hasNorth, hasSouth) = inBounds(y, globals.numChareY);

        // sum up the booleans to generate our neighbor count
        numNeighbors = hasEast.toInt() + hasWest.toInt() +
                       hasNorth.toInt() + hasSouth.toInt();

        // affect the range of computation based on whether
        // we have a neighbor (or not!)
        iStart = (!hasEast).toInt() + 1;
        jStart = (!hasNorth).toInt() + 1;

        iFinish = globals.blockDimX + 1 - (!hasWest).toInt();
        jFinish = globals.blockDimY + 1 - (!hasSouth).toInt();

        // enforce boundary conditions
        enforce_boundaries();
    }

    @mailbox def receive_ghost(it: int, dir: int, data: array<double>);
    @mailbox def receive_status(g_converged: bool);

    @threaded @entry def run() {
        var converged: bool = false;
        var it: int = 0;
        // for maxIters iterations, unless we converge:
        for (; !converged && (it < globals.maxIters); it += 1) {
            // send our ghost values to our neighbors
            start_iteration(it);
            // the process each of their messages
            for (var imsg = 0; imsg < numNeighbors; imsg += 1) {
                when receive_ghost(_ == it, dir, data) => {
                    process_ghost(dir, data);
                }
            }
            // compute the max difference for this iteration
            val maxDiff = check_and_compute();
            converged = (maxDiff <= globals.threshold);
            // then contribute to the reduction over members
            // (self[@] is this element, self@ is the whole array's proxy)
            self[@]contribute(converged, bool::logical_and, self@receive_status);
            // update our status accordingly
            when receive_status(g_converged) => {
                converged = g_converged;
            }
        }
        // if we're the leader, tell main we're done
        if (self[@]index() == (0, 0)) {
            globals.mainProxy.done(it);
        }
    }

    @entry def start_iteration(it: int) {
        val (x, y) = self[@]index();
        val (dimX, dimY) = (globals.blockDimX, globals.blockDimY);

        // determine which neighbors get which rows/columns
        if (hasNorth) {
            self@[x, y - 1].receive_ghost(it, globals.south, grid[:, 1].toArray());
        }

        if (hasEast) {
            self@[x - 1, y].receive_ghost(it, globals.west, grid[1, :].toArray());
        }

        if (hasSouth) {
            self@[x, y + 1].receive_ghost(it, globals.north, grid[:, dimY].toArray());
        }

        if (hasWest) {
            self@[x + 1, y].receive_ghost(it, globals.east, grid[dimX, :].toArray());
        }
    }

    private def enforce_boundaries() {
        val (dimX, dimY) = (globals.blockDimX, globals.blockDimY);
        val defaultValue = 1.0;

        // helper functions to init parts of grid and nextGrid
        // (we initialize both because we swap between them.)
        def setColumn(j: int) {
            grid[:, j] = defaultValue;
            nextGrid[:, j] = defaultValue;
        }

        def setRow(i: int) {
            grid[i, :] = defaultValue;
            nextGrid[i, :] = defaultValue;
        }

        // initialize regions of the grids at the edges,
        // that we don't have neighbors for
        if (!hasNorth) setColumn(1);

        if (!hasEast) setRow(1);

        if (!hasSouth) setColumn(dimY);

        if (!hasWest) setRow(dimX);
    }

    private def process_ghost(dir: int, data: array<double>) {
        val (dimX, dimY) = (globals.blockDimX, globals.blockDimY);
        assert((data.size() == (dimX + 2)) || (data.size() == (dimY + 2)));

        if (dir == globals.north && hasNorth) {
            grid[:, 0] = data;
        } else if (dir == globals.east && hasEast) {
            grid[0, :] = data;
        } else if (dir == globals.south && hasSouth) {
            grid[:, (dimY + 1)] = data;
        } else if (dir == globals.west && hasWest) {
            grid[(dimX + 1), :] = data;
        } else {
            abort(`fatal> received unexpected ghost from ${dir}`);
        }
    }

    private def check_and_compute(): double {
        var maxDiff = 0.0;

        for (var i = iStart; i < iFinish; i += 1) {
            for (var j = jStart; j < jFinish; j += 1) {
                nextGrid[i, j] =
                    0.2 * (grid[i, j] +
                       grid[i - 1, j] + grid[i + 1, j] +
                       grid[i, j - 1] + grid[i, j + 1]
                    );

                val diff = math::abs(nextGrid[i, j] - grid[i, j]);
                if (diff > maxDiff) {
                    maxDiff = diff;
                }
            }
        }

        // swap grids for the next iteration
        (grid, nextGrid) = (nextGrid, grid);

        return maxDiff;
    }
}
