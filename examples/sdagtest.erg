package examples;

import ergoline::_;
import ck;

@main class main {
    @entry def self() {
        val n = ck::numPes() * 4;
        new sdagtest@array1d(n, n, n * 4, self@);
    }

    @entry def done(count: int) {
        println(`main> done, count = ${count}.`);
        exit();
    }
}

class sdagtest {
    val neighbors: array<int, 1>;
    val mainProxy: main@;
    val numIts: int;
    val n: int;

    @entry def self(=n: int, =numIts: int, =mainProxy: main@) {
        // TODO enable [ (idx + n - 1) % n, (idx + 1) % n ]
        val idx = self[@]index();
        neighbors = new array<int, 1>(2);
        neighbors[0] = (idx + n - 1) % n;
        neighbors[1] = (idx + 1) % n;
        self[@]run();
        self[@]valid(idx);
    }

    @mailbox def valid(idx: int);
    @mailbox def invalid();

    @mailbox def receive(it: int, from: int);

    @threaded @entry def run() {
        // TODO shorten self[@]index()
        val idx = self[@]index();

        await any {
            when valid(_ == idx) => println(`ch(${idx})> received a message from itself!`);
            when invalid() => abort("you shouldn't see this!");
        }

        for (var it = 0; it < numIts; it += 1) {
            for (var i = 0; i < neighbors.size(); i += 1) {
                self@[neighbors[i]].receive(it, idx);
            }
        }

        @overlap for (var it = 0; it < numIts; it += 1) {
            @overlap for (var i = 0; i < neighbors.size(); i += 1) {
                when receive(_ == it, _ == neighbors[i]) => {
                    println(`ch${idx}> received value from ch${neighbors[i]} for iteration ${it}.`);
                }
            }
        }

        self[@]contribute(idx, int::+, mainProxy.done);
    }
}
