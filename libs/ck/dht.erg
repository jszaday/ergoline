package ck;

import ergoline::_;

class dht<K, V> {
    private val proxy: dht_<V>@array1d;
    private val n: int;

    def self(=n: int) {
        proxy = new dht_<V>@array1d(n, n);
    }

    def get(k: K)(implicit __proxy__: ck::proxy): future<V> {
        val h = hash<K>(k);
        val f = future<V>();
        proxy[(h % n).toInt()].get(h, f);
        return f;
    }

    def set(k: K, v: V) {
        val h = hash<K>(k);
        return proxy[(h % n).toInt()].set(h, v);
    }
}

class dht_<A> {
    @hashExclude private val data: map<hashcode, A>;
    @hashExclude private val waiting: map<hashcode, queue<future<A>>>;
    private val n: int;

    @entry def self(=n: int) {
        data = new map<hashcode, A>();
        waiting = new map<hashcode, queue<future<A>>>();
    }

    private def enqueue(h: hashcode, f: future<A>) {
        if (!waiting.contains(h)) {
            waiting[h] = new queue<future<A>>();
        }

        waiting[h].append(f);
    }

    @entry def get(h: hashcode, f: future<A>) {
        if (data.contains(h)) {
            f.set(data[h]);
            data.remove(h);
        } else {
            enqueue(h, f);
        }
    }

    @entry def set(h: hashcode, a: A) {
        if (waiting.contains(h)) {
            val q = waiting[h];
            q.head().set(a);
            q.removeHead();
            if (q.isEmpty()) {
                waiting.remove(h);
            }
        } else {
            data[h] = a;
        }
    }
}
