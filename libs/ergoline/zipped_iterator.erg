package ergoline;

@transient class zipped_iterator<A, B> with iterator<(A, B)> {

    val as: iterator<A>;
    val bs: iterator<B>;

    def self(=as: iterator<A>, =bs: iterator<B>) {}

    override def next(): (A, B) {
        return (as.next(), bs.next());
    }

    override def hasNext(): bool {
        return (as.hasNext() && bs.hasNext());
    }
}
