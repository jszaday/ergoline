package ergoline;

@system(alias="ergoline::array")
class array<A, N: int = 1> extends iterable<A> {
    using shapeType = (int) .* N;

    @system val shape: shapeType;

    @system def self();
    @system def self(n: *shapeType);

    @system def [](idx: *shapeType): A&;

    // @system def [](indices: *((range<int>) .* N)): iterable<A>;

    @system def size(): int where N == 1;

    @transient private class iterator_  with iterator<A> where N == 1 {
        var current: int = 0;
        val base: array<A, N>;

        def self(=base: array<A, N>) {}

        override def hasNext(): bool {
            return current < base.size();
        }

        override def next(): A {
            val prev = current;
            current += 1;
            return base[prev];
        }
    }

    override def iter(): iterator<A> where N == 1 {
        return new iterator_(self);
    }

    @system def getOrNone(idx: int): option<A>;

    @system
    static def fill(idx: shapeType, value: A): array<A, N>;
}
