package ergoline;

@system(alias="ergoline::array")
class array<A, N: int = 1> extends iterable<A> {
    using shapeType = (int) .* N;

    @system val shape: shapeType;

    @system def self();
    @system def self(n: *shapeType);

    @system def [](idx: *shapeType): A&;

    // TODO ( introduce a way to auto-generate these alternatives )
    def [](slices: *(slice, slice)): array_view<A, N> where (N == 2) {
        return new array_view<A, N>(self, slices);
    }

    def [](slices: *(int, slice)): array_view<A, N> where (N == 2) {
        return new array_view<A, N>(self, slices);
    }

    def [](slices: *(slice, int)): array_view<A, N> where (N == 2) {
        return new array_view<A, N>(self, slices);
    }

    def [](x: slice): array_view<A, N> where (N == 1) {
        return new array_view<A, N>(self, x);
    }

    @system def size(): int where N == 1;

    @system(static, alias="ergoline::total_size", applyResult="int")
    def totalSize(): int;

    @system(static, format="ergoline::offset_for<{0}>()", applyResult="int")
    static def offset(): int;

    @transient private class iterator_  with iterator<A> where N == 1 {
        var current: int = 0;
        val base: array<A, N>;

        def self(=base: array<A, N>) {}

        override def hasNext(): bool {
            return current < base.size();
        }

        override def next(): A {
            val prev = current;
            current += 1;
            return base[prev];
        }
    }

    override def iter(): iterator<A> where N == 1 {
        return new iterator_(self);
    }

    @system def getOrNone(idx: int): option<A>;

    @system
    static def fill(idx: shapeType, value: A): array<A, N>;

    @system def clone(): array<A, N>;

    @system def toString(): string;
}
