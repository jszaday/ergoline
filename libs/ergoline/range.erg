package ergoline;

struct range<A> with iterable<A> {
    val start: A;
    val end: A;
    val step: A;

    def range(=start: A, =step: A, =end: A) { }

    override def iter(): iterator<A> {
        return new range_iterator(self);
    }

    @transient private class range_iterator with iterator<A> {
        val r: range<A>;
        var current: A;

        def range_iterator(=r: range<A>) {
            current = r.start;
        }

        override def hasNext(): bool {
            return current < r.end;
        }

        override def next(): A {
            val t = current;
            current += r.step;
            return t;
        }
    }
}
