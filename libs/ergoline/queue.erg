package ergoline;

@system(alias="std::deque", fromHeader="deque")
class queue<A> extends iterable<A> {
    @system def self();

    @system(alias="front")
    def head(): A&;
    @system(alias="back")
    def last(): A&;
    @system(alias="empty")
    def isEmpty(): bool;
    @system(alias="empty",invert=true)
    def nonEmpty(): bool;
    @system(alias="push_back")
    def append(a: A);
    @system(alias="push_front")
    def prepend(a: A);
    @system(alias="pop_front")
    def removeHead();
    @system(alias="pop_back")
    def removeLast();
    @system(applyResult="int")
    def size(): int;

    @system def [](idx: int): A&;

    @transient private class iterator_ with iterator<A> {
        var current: int = 0;
        val base: queue<A>;

        def self(=base: queue<A>) {}

        override def hasNext(): bool {
            return current < base.size();
        }

        override def next(): A {
            val prev = current;
            current += 1;
            return base[prev];
        }
    }

    override def iter(): iterator<A> {
        return new iterator_(self);
    }
}
