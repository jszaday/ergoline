package benchmarks;

import ergoline::_;
import ck;

@main class main {
    val bwProxy: bandwidth@;

    val nIters: int;
    val nReps: int;
    val nSkip: int;

    val verbose: bool = false;
    val sizes: queue<int>;

    @entry def self(args: array<string>) {
        // read the command line args
        nIters = (args.size() > 1) ? args[1].toInt() : 256;
        nReps = (args.size() > 2) ? args[2].toInt() : (nIters / 10 + 1);
        nSkip = nReps / 2;
        // pick the most distant PE
        val whichNode = ck::numNodes() - 1;
        val whichPe =
          (whichNode == ck::myNode()) ? ((ck::myPe() + 1) % ck::numPes())
                                      : ck::nodeFirst(whichNode);
        // set up all the sizes
        sizes = new queue<int>();
        val maxSize = 4 * 1024 * 1024;
        for (var size = 8; size <= maxSize; size *= 2) {
            sizes.append(size);
        }
        // and create the other chare on it
        bwProxy = new bandwidth@(self@, maxSize, whichPe);
        println("Size\t\tMB/s");
    }

    @entry def next() {
        if (sizes.isEmpty()) {
            exit();
        } else {
            val size = sizes.head();
            self@run(size);
            sizes.removeHead();
        }
    }

    @threaded @entry def run(size: int) {
        val arr = new array<char, 1>(size);
        var totalTime = 0.0;

        for (var rep = 0; rep < (nReps + nSkip); rep += 1) {
            val start = ck::wallTime();
            // inform chare that it will receive n messages
            bwProxy.run(nIters, arr.totalSize());
            // then send the messages
            for (var it = 0; it < nIters; it += 1) {
                // start timing after skipping some iters
                bwProxy.arrival(arr);
            }
            // wait for confirmation from the other chare
            when continue() => ;
            // then stop timing (and accumulate the results)
            val end = ck::wallTime();
            val time = end - start;
            if (rep >= nSkip) {
                totalTime += time;
            }
            if (verbose) {
                println(`info> rep ${rep + 1} out of ${nReps + nSkip} took ${time} s`);
            }
        }

        val avgTime = totalTime / nReps;
        val totalSize = arr.totalSize();
        val bw = (totalSize * nIters) / (avgTime * 1024.0 * 1024.0);

        println(`${size}\t\t${bw}`);

        self@next();
    }

    @mailbox def continue();
}

class bandwidth {
    val buffers: map<int, array<char, 1>>;
    val mainProxy: main@;

    @entry def self(=mainProxy: main@, maxSize: int) {
        // this is a property of the machine
        val overhead = array<char, 1>::offset();
        // allocate all the receive buffers
        buffers = new map<int, array<char, 1>>();
        for (var size = ck::zcThreshold(); size <= maxSize; size *= 2) {
            val total = size + overhead;
            buffers[total] = new array<char, 1>(total);
        }
        // requires all zc transfers to have manually
        // posted receive buffers (no implicit alloc)
        (self@arrival).requirePost(true);
        // tell main we're ready
        mainProxy.next();
    }

    @threaded @entry def run(nMsgs: int, size: int) {
        // if we have a zc receive buffer
        if (buffers.contains(size)) {
            // get the pre-alloc'd buffer
            val buffer = buffers[size];
            // for all n messages (in any order):
            @overlap for (var i = 0; i < nMsgs; i += 1) {
                // manually post a receive buffer
                (self@arrival).post(buffer);
                // then await the message's arrival
                when arrival(_) => ;
            }
        } else {
            // for all n messages (in any order):
            @overlap for (var i = 0; i < nMsgs; i += 1) {
                // await the message's arrival
                when arrival(_) => ;
            }
        }
        // afterwards, send confirmation to main
        mainProxy.continue();
    }

    @mailbox def arrival(arr: array<char, 1>);
}
